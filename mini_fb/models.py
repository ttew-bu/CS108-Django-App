from django.db import models
from django.urls import reverse

#file: models.py
#author: Tristan Tew (ttew@bu.edu)
#description: creating the model for the profile, status message, and more to display on mini_fb

# Create your models here!

class Profile(models.Model):
    '''Creates the format for the profile model'''

    #data attributes of a mini_fb profile:
    first_name = models.TextField(blank=True)
    last_name = models.TextField(blank=True)
    city = models.TextField(blank=True)
    email_address = models.TextField(blank=True)
    profile_image_url = models.URLField(blank=True)
    birth_date = models.DateField(blank=True) #added and migrated to display the birthday from the form a few assignments ago
    member_since = models.DateField(auto_now_add=True) #added to display a full profile; timestamps via auto_now_add

    #NEW create the friend field to relate to other profiles
    friends = models.ManyToManyField("self", blank=True) 

    #create a string representation of the data

    def __str__(self):
        '''return a string representation of this object'''
        return '%s %s %s %s' % (self.first_name, self.last_name, self.city, self.email_address)

    #New function to tie statuses to individuals
    def get_status_messages(self):
        '''utilizes filtering by pk to group all statuses for a user'''

        statuses = StatusMessage.objects.filter(profile=self.pk)

        return statuses
    
    #Creates a page to for user to see once a profile is created
    def get_absolute_url(self):
        '''Return a URL to display this profile object'''

        return reverse("show_profile_page", kwargs={"pk": self.pk})

    #utilizes a query and the friend field to create a list of friends
    def get_friends(self):
        '''Return a list of friends related to one profile'''

        #find a list of friends for the profile 
        friends = Profile.objects.filter(friends=self.pk)

        #return the list 
        return friends

    #utilizes a query, status messages, and the friends field 
    def get_news_feed(self):
        '''returns a list of friends' status message'''

        news = StatusMessage.objects.all().order_by("-timestamp") #given in assignment, lays out all statuses

        #defines a friendlist for the given profile 
        friendlist = self.get_friends()

        #defines the friends given in the profile via the __in operator
        friend_news = news.filter(profile__in=friendlist)

        #defines news from your own profile since it is excluded in the previous query
        self_news = news.filter(profile=self.pk)

        #combine both querysets
        all_news = friend_news|self_news

        #return all of the news in one queryset that will display through the HTML page 
        return all_news

    #utilizes a query, status message, and the friends
    def get_friend_suggestions(self):
        '''returns a list of potential friends'''

        #list of all possible friends
        possible_friends = Profile.objects.all()

        #list of all friends associated with a profile
        current_friends = self.get_friends()

        #list of all friends, less those currently friended and less yourself. 
        list_friends = possible_friends.exclude(friends=self).exclude(id=self.pk)


        #return the list offriends to be added 
        return list_friends

class StatusMessage(models.Model):
    '''Create the format for a status message'''

    #data attributes of a status model

    timestamp = models.TimeField(auto_now_add=True) 
    #uses the auto_now_add feature and timefield type to create an autogenerated timestamp
    message = models.TextField(blank=True)
    image = models.ImageField(blank=True)
    
    profile = models.ForeignKey('Profile', on_delete=models.CASCADE,) 
    #uses a foreign key relationship to tie this to the profile and delete when the profile is deleted

    #str method used to create string of the class outputs
    def __str__(self):
        '''return a string representaion of the status update'''
        return '%s %s %s %s' % (self.timestamp, self.message, self.image, self.profile)
